/*
package nutcore

import chisel3._
import chisel3.util._
import chisel3.util.experimental.BoringUtils

import utils._

// rvv 1.0
// 273 instructions
object RVVInstr extends HasInstrType {
  // Vector Single-Width Averaging Add and Subtract
  def VAADD_VV         = BitPat("b001001???????????010?????1010111")
  def VAADD_VX         = BitPat("b001001???????????110?????1010111")
  def VAADDU_VV        = BitPat("b001000???????????010?????1010111")
  def VAADDU_VX        = BitPat("b001000???????????110?????1010111")
  def VASUB_VV         = BitPat("b001011???????????010?????1010111")
  def VASUB_VX         = BitPat("b001011???????????110?????1010111")
  def VASUBU_VV        = BitPat("b001010???????????010?????1010111")
  def VASUBU_VX        = BitPat("b001010???????????110?????1010111")

  // Vector Integer Add-with-Carry / Subtract-with-Borrow Instructions
  def VADC_VIM         = BitPat("b0100000??????????011?????1010111")
  def VADC_VVM         = BitPat("b0100000??????????000?????1010111")
  def VADC_VXM         = BitPat("b0100000??????????100?????1010111")
  def VMADC_VI         = BitPat("b0100011??????????011?????1010111")
  def VMADC_VIM        = BitPat("b0100010??????????011?????1010111")
  def VMADC_VV         = BitPat("b0100011??????????000?????1010111")
  def VMADC_VVM        = BitPat("b0100010??????????000?????1010111")
  def VMADC_VX         = BitPat("b0100011??????????100?????1010111")
  def VMADC_VXM        = BitPat("b0100010??????????100?????1010111")
  def VSBC_VVM         = BitPat("b0100100??????????000?????1010111")
  def VSBC_VXM         = BitPat("b0100100??????????100?????1010111")
  def VMSBC_VV         = BitPat("b0100111??????????000?????1010111")
  def VMSBC_VVM        = BitPat("b0100110??????????000?????1010111")
  def VMSBC_VX         = BitPat("b0100111??????????100?????1010111")
  def VMSBC_VXM        = BitPat("b0100110??????????100?????1010111")

  // Vector Single-Width Integer Add and Subtract
  def VADD_VI          = BitPat("b000000???????????011?????1010111")
  def VADD_VV          = BitPat("b000000???????????000?????1010111")
  def VADD_VX          = BitPat("b000000???????????100?????1010111")
  def VSUB_VV          = BitPat("b000010???????????000?????1010111")
  def VSUB_VX          = BitPat("b000010???????????100?????1010111")
  def VRSUB_VI         = BitPat("b000011???????????011?????1010111")
  def VRSUB_VX         = BitPat("b000011???????????100?????1010111")

  // Vector Bitwise Logical Instructions
  def VAND_VI          = BitPat("b001001???????????011?????1010111")
  def VAND_VV          = BitPat("b001001???????????000?????1010111")
  def VAND_VX          = BitPat("b001001???????????100?????1010111")
  def VOR_VI           = BitPat("b001010???????????011?????1010111")
  def VOR_VV           = BitPat("b001010???????????000?????1010111")
  def VOR_VX           = BitPat("b001010???????????100?????1010111")
  def VXOR_VI          = BitPat("b001011???????????011?????1010111")
  def VXOR_VV          = BitPat("b001011???????????000?????1010111")
  def VXOR_VX          = BitPat("b001011???????????100?????1010111")

  // Vector Compress Instruction
  def VCOMPRESS_VM     = BitPat("b0101111??????????010?????1010111")

  // Vector count population in mask vcpop.m
  def VCPOP_M          = BitPat("b010000??????10000010?????1010111")

  // Vector Integer Divide Instructions
  def VDIV_VV          = BitPat("b100001???????????010?????1010111")
  def VDIV_VX          = BitPat("b100001???????????110?????1010111")
  def VDIVU_VV         = BitPat("b100000???????????010?????1010111")
  def VDIVU_VX         = BitPat("b100000???????????110?????1010111")
  def VREM_VV          = BitPat("b100011???????????010?????1010111")
  def VREM_VX          = BitPat("b100011???????????110?????1010111")
  def VREMU_VV         = BitPat("b100010???????????010?????1010111")
  def VREMU_VX         = BitPat("b100010???????????110?????1010111")

  // Vector Element Index Instruction
  def VID_V            = BitPat("b010100?0000010001010?????1010111")

  // Vector Iota Instruction
  def VIOTA_M          = BitPat("b010100??????10000010?????1010111")

  // Vector Load/Store Whole Register Instructions
  def VL1RE16_V        = BitPat("b000000101000?????101?????0000111")
  def VL1RE32_V        = BitPat("b000000101000?????110?????0000111")
  def VL1RE64_V        = BitPat("b000000101000?????111?????0000111")
  def VL1RE8_V         = BitPat("b000000101000?????000?????0000111")
  def VL2RE16_V        = BitPat("b001000101000?????101?????0000111")
  def VL2RE32_V        = BitPat("b001000101000?????110?????0000111")
  def VL2RE64_V        = BitPat("b001000101000?????111?????0000111")
  def VL2RE8_V         = BitPat("b001000101000?????000?????0000111")
  def VL4RE16_V        = BitPat("b011000101000?????101?????0000111")
  def VL4RE32_V        = BitPat("b011000101000?????110?????0000111")
  def VL4RE64_V        = BitPat("b011000101000?????111?????0000111")
  def VL4RE8_V         = BitPat("b011000101000?????000?????0000111")
  def VL8RE16_V        = BitPat("b111000101000?????101?????0000111")
  def VL8RE32_V        = BitPat("b111000101000?????110?????0000111")
  def VL8RE64_V        = BitPat("b111000101000?????111?????0000111")
  def VL8RE8_V         = BitPat("b111000101000?????000?????0000111")
  def VS1R_V           = BitPat("b000000101000?????000?????0100111")
  def VS2R_V           = BitPat("b001000101000?????000?????0100111")
  def VS4R_V           = BitPat("b011000101000?????000?????0100111")
  def VS8R_V           = BitPat("b111000101000?????000?????0100111")

  // Vector Unit-Stride Instructions
  def VLE8_V           = BitPat("b???000?00000?????000?????0000111")
  def VLE16_V          = BitPat("b???000?00000?????101?????0000111")
  def VLE32_V          = BitPat("b???000?00000?????110?????0000111")
  def VLE64_V          = BitPat("b???000?00000?????111?????0000111")
  def VSE16_V          = BitPat("b???000?00000?????101?????0100111")
  def VSE32_V          = BitPat("b???000?00000?????110?????0100111")
  def VSE64_V          = BitPat("b???000?00000?????111?????0100111")
  def VSE8_V           = BitPat("b???000?00000?????000?????0100111")
  def VLM_V            = BitPat("b000000101011?????000?????0000111")
  def VSM_V            = BitPat("b000000101011?????000?????0100111")

  // Unit-stride Fault-Only-First Loads
  def VLE8FF_V         = BitPat("b???000?10000?????000?????0000111")
  def VLE16FF_V        = BitPat("b???000?10000?????101?????0000111")
  def VLE32FF_V        = BitPat("b???000?10000?????110?????0000111")
  def VLE64FF_V        = BitPat("b???000?10000?????111?????0000111")

  // Vector Indexed Instructions
  def VLUXEI8_V        = BitPat("b???001???????????000?????0000111")
  def VLUXEI16_V       = BitPat("b???001???????????101?????0000111")
  def VLUXEI32_V       = BitPat("b???001???????????110?????0000111")
  def VLUXEI64_V       = BitPat("b???001???????????111?????0000111")
  def VLOXEI8_V        = BitPat("b???011???????????000?????0000111")
  def VLOXEI16_V       = BitPat("b???011???????????101?????0000111")
  def VLOXEI32_V       = BitPat("b???011???????????110?????0000111")
  def VLOXEI64_V       = BitPat("b???011???????????111?????0000111")
  def VSUXEI8_V        = BitPat("b???001???????????000?????0100111")
  def VSUXEI16_V       = BitPat("b???001???????????101?????0100111")
  def VSUXEI32_V       = BitPat("b???001???????????110?????0100111")
  def VSUXEI64_V       = BitPat("b???001???????????111?????0100111")
  def VSOXEI8_V        = BitPat("b???011???????????000?????0100111")
  def VSOXEI16_V       = BitPat("b???011???????????101?????0100111")
  def VSOXEI32_V       = BitPat("b???011???????????110?????0100111")
  def VSOXEI64_V       = BitPat("b???011???????????111?????0100111")

  // Vector Strided Instructions
  def VLSE8_V          = BitPat("b???010???????????000?????0000111")
  def VLSE16_V         = BitPat("b???010???????????101?????0000111")
  def VLSE32_V         = BitPat("b???010???????????110?????0000111")
  def VLSE64_V         = BitPat("b???010???????????111?????0000111")
  def VSSE8_V          = BitPat("b???010???????????000?????0100111")
  def VSSE16_V         = BitPat("b???010???????????101?????0100111")
  def VSSE32_V         = BitPat("b???010???????????110?????0100111")
  def VSSE64_V         = BitPat("b???010???????????111?????0100111")

  // Vector Single-Width Integer Multiply-Add Instructions
  def VMACC_VV         = BitPat("b101101???????????010?????1010111")
  def VMACC_VX         = BitPat("b101101???????????110?????1010111")
  def VNMSAC_VV        = BitPat("b101111???????????010?????1010111")
  def VNMSAC_VX        = BitPat("b101111???????????110?????1010111")
  def VNMSUB_VV        = BitPat("b101011???????????010?????1010111")
  def VNMSUB_VX        = BitPat("b101011???????????110?????1010111")
  def VMADD_VV         = BitPat("b101001???????????010?????1010111")
  def VMADD_VX         = BitPat("b101001???????????110?????1010111")

  // Vector Mask-Register Logical Instructions
  def VMAND_MM         = BitPat("b0110011??????????010?????1010111")
  def VMANDN_MM        = BitPat("b0110001??????????010?????1010111")
  def VMXOR_MM         = BitPat("b0110111??????????010?????1010111")
  def VMNAND_MM        = BitPat("b0111011??????????010?????1010111")
  def VMNOR_MM         = BitPat("b0111101??????????010?????1010111")
  def VMOR_MM          = BitPat("b0110101??????????010?????1010111")
  def VMORN_MM         = BitPat("b0111001??????????010?????1010111")
  def VMXNOR_MM        = BitPat("b0111111??????????010?????1010111")

  // Vector Integer Min/Max Instructions
  def VMAX_VV          = BitPat("b000111???????????000?????1010111")
  def VMAX_VX          = BitPat("b000111???????????100?????1010111")
  def VMAXU_VV         = BitPat("b000110???????????000?????1010111")
  def VMAXU_VX         = BitPat("b000110???????????100?????1010111")
  def VMIN_VV          = BitPat("b000101???????????000?????1010111")
  def VMIN_VX          = BitPat("b000101???????????100?????1010111")
  def VMINU_VV         = BitPat("b000100???????????000?????1010111")
  def VMINU_VX         = BitPat("b000100???????????100?????1010111")

  // Vector Integer Merge Instructions
  def VMERGE_VIM       = BitPat("b0101110??????????011?????1010111")
  def VMERGE_VVM       = BitPat("b0101110??????????000?????1010111")
  def VMERGE_VXM       = BitPat("b0101110??????????100?????1010111")

  // Vector Integer Compare Instructions
  def VMSEQ_VI         = BitPat("b011000???????????011?????1010111")
  def VMSEQ_VV         = BitPat("b011000???????????000?????1010111")
  def VMSEQ_VX         = BitPat("b011000???????????100?????1010111")
  def VMSGT_VI         = BitPat("b011111???????????011?????1010111")
  def VMSGT_VX         = BitPat("b011111???????????100?????1010111")
  def VMSGTU_VI        = BitPat("b011110???????????011?????1010111")
  def VMSGTU_VX        = BitPat("b011110???????????100?????1010111")
  def VMSLE_VI         = BitPat("b011101???????????011?????1010111")
  def VMSLE_VV         = BitPat("b011101???????????000?????1010111")
  def VMSLE_VX         = BitPat("b011101???????????100?????1010111")
  def VMSLEU_VI        = BitPat("b011100???????????011?????1010111")
  def VMSLEU_VV        = BitPat("b011100???????????000?????1010111")
  def VMSLEU_VX        = BitPat("b011100???????????100?????1010111")
  def VMSLT_VV         = BitPat("b011011???????????000?????1010111")
  def VMSLT_VX         = BitPat("b011011???????????100?????1010111")
  def VMSLTU_VV        = BitPat("b011010???????????000?????1010111")
  def VMSLTU_VX        = BitPat("b011010???????????100?????1010111")
  def VMSNE_VI         = BitPat("b011001???????????011?????1010111")
  def VMSNE_VV         = BitPat("b011001???????????000?????1010111")
  def VMSNE_VX         = BitPat("b011001???????????100?????1010111")

  // vmsif.m set-including-first mask bit
  def VMSIF_M          = BitPat("b010100??????00011010?????1010111")
  // vmsof.m set-only-first mask bit
  def VMSOF_M          = BitPat("b010100??????00010010?????1010111")
  // vmsbf.m set-before-first mask bit
  def VMSBF_M          = BitPat("b010100??????00001010?????1010111")
  def VFIRST_M         = BitPat("b010000??????10001010?????1010111")

  // Vector Single-Width Integer Multiply Instructions
  def VMUL_VV          = BitPat("b100101???????????010?????1010111")
  def VMUL_VX          = BitPat("b100101???????????110?????1010111")
  def VMULH_VV         = BitPat("b100111???????????010?????1010111")
  def VMULH_VX         = BitPat("b100111???????????110?????1010111")
  def VMULHSU_VV       = BitPat("b100110???????????010?????1010111")
  def VMULHSU_VX       = BitPat("b100110???????????110?????1010111")
  def VMULHU_VV        = BitPat("b100100???????????010?????1010111")
  def VMULHU_VX        = BitPat("b100100???????????110?????1010111")

  // Whole Vector Register Move
  def VMV1R_V          = BitPat("b1001111?????00000011?????1010111")
  def VMV2R_V          = BitPat("b1001111?????00001011?????1010111")
  def VMV4R_V          = BitPat("b1001111?????00011011?????1010111")
  def VMV8R_V          = BitPat("b1001111?????00111011?????1010111")

  // Integer Scalar Move Instructions
  def VMV_S_X          = BitPat("b010000100000?????110?????1010111")
  def VMV_X_S          = BitPat("b0100001?????00000010?????1010111")
  // Vector Integer Move Instructions
  def VMV_V_I          = BitPat("b010111100000?????011?????1010111")
  def VMV_V_V          = BitPat("b010111100000?????000?????1010111")
  def VMV_V_X          = BitPat("b010111100000?????100?????1010111")

  // Vector Narrowing Fixed-Point Clip Instructions, todo
  def VNCLIP_WI        = BitPat("b101111???????????011?????1010111")
  def VNCLIP_WV        = BitPat("b101111???????????000?????1010111")
  def VNCLIP_WX        = BitPat("b101111???????????100?????1010111")
  def VNCLIPU_WI       = BitPat("b101110???????????011?????1010111")
  def VNCLIPU_WV       = BitPat("b101110???????????000?????1010111")
  def VNCLIPU_WX       = BitPat("b101110???????????100?????1010111")

  // Vector Narrowing Integer Right Shift Instructions
  def VNSRA_WI         = BitPat("b101101???????????011?????1010111")
  def VNSRA_WV         = BitPat("b101101???????????000?????1010111")
  def VNSRA_WX         = BitPat("b101101???????????100?????1010111")
  def VNSRL_WI         = BitPat("b101100???????????011?????1010111")
  def VNSRL_WV         = BitPat("b101100???????????000?????1010111")
  def VNSRL_WX         = BitPat("b101100???????????100?????1010111")

  // Vector Single-Width Integer Reduction Instructions
  def VREDAND_VS       = BitPat("b000001???????????010?????1010111")
  def VREDMAX_VS       = BitPat("b000111???????????010?????1010111")
  def VREDMAXU_VS      = BitPat("b000110???????????010?????1010111")
  def VREDMIN_VS       = BitPat("b000101???????????010?????1010111")
  def VREDMINU_VS      = BitPat("b000100???????????010?????1010111")
  def VREDOR_VS        = BitPat("b000010???????????010?????1010111")
  def VREDSUM_VS       = BitPat("b000000???????????010?????1010111")
  def VREDXOR_VS       = BitPat("b000011???????????010?????1010111")

  // Vector Register Gather Instructions
  def VRGATHER_VI      = BitPat("b001100???????????011?????1010111")
  def VRGATHER_VV      = BitPat("b001100???????????000?????1010111")
  def VRGATHER_VX      = BitPat("b001100???????????100?????1010111")
  def VRGATHEREI16_VV  = BitPat("b001110???????????000?????1010111")

  // Vector Single-Width Saturating Add and Subtract
  def VSADD_VI         = BitPat("b100001???????????011?????1010111")
  def VSADD_VV         = BitPat("b100001???????????000?????1010111")
  def VSADD_VX         = BitPat("b100001???????????100?????1010111")
  def VSADDU_VI        = BitPat("b100000???????????011?????1010111")
  def VSADDU_VV        = BitPat("b100000???????????000?????1010111")
  def VSADDU_VX        = BitPat("b100000???????????100?????1010111")
  def VSSUB_VV         = BitPat("b100011???????????000?????1010111")
  def VSSUB_VX         = BitPat("b100011???????????100?????1010111")
  def VSSUBU_VV        = BitPat("b100010???????????000?????1010111")
  def VSSUBU_VX        = BitPat("b100010???????????100?????1010111")

  // Configuration-setting instructions
  def VSETIVLI         = BitPat("b11???????????????111?????1010111")
  def VSETVL           = BitPat("b1000000??????????111?????1010111")
  def VSETVLI          = BitPat("b0????????????????111?????1010111")

  // Vector Slide Instructions
  def VSLIDE1DOWN_VX   = BitPat("b001111???????????110?????1010111")
  def VSLIDE1UP_VX     = BitPat("b001110???????????110?????1010111")
  def VSLIDEDOWN_VI    = BitPat("b001111???????????011?????1010111")
  def VSLIDEDOWN_VX    = BitPat("b001111???????????100?????1010111")
  def VSLIDEUP_VI      = BitPat("b001110???????????011?????1010111")
  def VSLIDEUP_VX      = BitPat("b001110???????????100?????1010111")

  // Vector Single-Width Shift Instructions
  def VSLL_VI          = BitPat("b100101???????????011?????1010111")
  def VSLL_VV          = BitPat("b100101???????????000?????1010111")
  def VSLL_VX          = BitPat("b100101???????????100?????1010111")
  def VSRA_VI          = BitPat("b101001???????????011?????1010111")
  def VSRA_VV          = BitPat("b101001???????????000?????1010111")
  def VSRA_VX          = BitPat("b101001???????????100?????1010111")
  def VSRL_VI          = BitPat("b101000???????????011?????1010111")
  def VSRL_VV          = BitPat("b101000???????????000?????1010111")
  def VSRL_VX          = BitPat("b101000???????????100?????1010111")

  // Vector Single-Width Fractional Multiply with Rounding and Saturation
  def VSMUL_VV         = BitPat("b100111???????????000?????1010111")
  def VSMUL_VX         = BitPat("b100111???????????100?????1010111")

  // Vector Single-Width Scaling Shift Instructions
  def VSSRA_VI         = BitPat("b101011???????????011?????1010111")
  def VSSRA_VV         = BitPat("b101011???????????000?????1010111")
  def VSSRA_VX         = BitPat("b101011???????????100?????1010111")
  def VSSRL_VI         = BitPat("b101010???????????011?????1010111")
  def VSSRL_VV         = BitPat("b101010???????????000?????1010111")
  def VSSRL_VX         = BitPat("b101010???????????100?????1010111")

  // Vector Widening Integer Add/Subtract
  def VWADD_VV         = BitPat("b110001???????????010?????1010111")
  def VWADD_VX         = BitPat("b110001???????????110?????1010111")
  def VWADD_WV         = BitPat("b110101???????????010?????1010111")
  def VWADD_WX         = BitPat("b110101???????????110?????1010111")
  def VWADDU_VV        = BitPat("b110000???????????010?????1010111")
  def VWADDU_VX        = BitPat("b110000???????????110?????1010111")
  def VWADDU_WV        = BitPat("b110100???????????010?????1010111")
  def VWADDU_WX        = BitPat("b110100???????????110?????1010111")
  def VWSUB_VV         = BitPat("b110011???????????010?????1010111")
  def VWSUB_VX         = BitPat("b110011???????????110?????1010111")
  def VWSUB_WV         = BitPat("b110111???????????010?????1010111")
  def VWSUB_WX         = BitPat("b110111???????????110?????1010111")
  def VWSUBU_VV        = BitPat("b110010???????????010?????1010111")
  def VWSUBU_VX        = BitPat("b110010???????????110?????1010111")
  def VWSUBU_WV        = BitPat("b110110???????????010?????1010111")
  def VWSUBU_WX        = BitPat("b110110???????????110?????1010111")

  // Vector Widening Integer Multiply-Add Instructions
  def VWMACC_VV        = BitPat("b111101???????????010?????1010111")
  def VWMACC_VX        = BitPat("b111101???????????110?????1010111")
  def VWMACCSU_VV      = BitPat("b111111???????????010?????1010111")
  def VWMACCSU_VX      = BitPat("b111111???????????110?????1010111")
  def VWMACCU_VV       = BitPat("b111100???????????010?????1010111")
  def VWMACCU_VX       = BitPat("b111100???????????110?????1010111")
  def VWMACCUS_VX      = BitPat("b111110???????????110?????1010111")

  // Vector Widening Integer Multiply Instructions
  def VWMUL_VV         = BitPat("b111011???????????010?????1010111")
  def VWMUL_VX         = BitPat("b111011???????????110?????1010111")
  def VWMULSU_VV       = BitPat("b111010???????????010?????1010111")
  def VWMULSU_VX       = BitPat("b111010???????????110?????1010111")
  def VWMULU_VV        = BitPat("b111000???????????010?????1010111")
  def VWMULU_VX        = BitPat("b111000???????????110?????1010111")

  // Vector Widening Integer Reduction Instructions
  def VWREDSUM_VS      = BitPat("b110001???????????000?????1010111")
  def VWREDSUMU_VS     = BitPat("b110000???????????000?????1010111")

  // Vector Integer Extension
  def VSEXT_VF2        = BitPat("b010010??????00111010?????1010111")
  def VSEXT_VF4        = BitPat("b010010??????00101010?????1010111")
  def VSEXT_VF8        = BitPat("b010010??????00011010?????1010111")
  def VZEXT_VF2        = BitPat("b010010??????00110010?????1010111")
  def VZEXT_VF4        = BitPat("b010010??????00100010?????1010111")
  def VZEXT_VF8        = BitPat("b010010??????00010010?????1010111")

  // Auxiliary vectorization instructions
  def VAND_ADJ_VX      = BitPat("b110000?_?????_?????_111_?????_1010111")
  def VOR_ADJ_VX       = BitPat("b110001?_?????_?????_111_?????_1010111")
  def VXOR_ADJ_VX      = BitPat("b110010?_?????_?????_111_?????_1010111")
  def VADD_ADJ_VX      = BitPat("b110011?_?????_?????_111_?????_1010111")
  def VSUB_ADJ_VX      = BitPat("b110100?_?????_?????_111_?????_1010111")
  def VFILLR_VX        = BitPat("b000000?_?????_?????_100_?????_0001011")

  val table = Array(
    // TODO: RVV
  )
}
*/